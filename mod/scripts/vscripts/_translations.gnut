untyped
global function ServerTranslantionsInit
global function ServerAddTranslationsForToken
global function ServerLocalizeTokenForClient

const array ValidLanguages = ["english","french","german","spanish","italian","japanese","polish","russian","tchinese","portuguese","mspanish"]

global struct LocalizedStringStruct
{
    string english
    string french
    string german
    string spanish
    string italian
    string japanese
    string polish
    string russian
    string tchinese
    string portuguese
    string mspanish
}

struct SaveFileStruct
{
    string Mod
    table< string, table<string, string> > Phrases
}

// Can't search for name in struct directly without switch/case, let's use tables.
// table< modName, table< szToken, table<language, text> > >
table< string, table< string, table<string, string> > > NSServerDictionary

void function ServerTranslantionsInit()
{
    if ( !IsLobby() )
    {
        AddCallback_OnClientConnected( ServerTranslantionsOnClientConnected )
        // Client language override for debug purposes. Usage: "cl_mls_forcelanguage <language>"
        AddClientCommandCallback( "cl_mls_forcelanguage", ClientCommandCallbackForceLanguage )
    }

    ServerInitModTranslations()

    #if DEV
    // For testing: script NSSendPopUpMessageToPlayer(GetPlayerArray()[0], ServerLocalizeTokenForClient(GetPlayerArray()[0], "#HelloWorld", "Gazyi.MultiLanguageStrings"))
    LocalizedStringStruct HelloWorldStruct
    HelloWorldStruct.english = "Hello World!"
    HelloWorldStruct.french = "Bonjour le Monde!"
    HelloWorldStruct.german = "Hallo Welt!"
    HelloWorldStruct.spanish = "Hola Mundo!"
    HelloWorldStruct.italian = "Ciao Mondo!"
    HelloWorldStruct.japanese = "こんにちは世界!"
    HelloWorldStruct.polish = "Witaj świecie!"
    HelloWorldStruct.russian = "Привет, мир!"
    HelloWorldStruct.tchinese = "你好世界!"
    HelloWorldStruct.portuguese = "Olá, mundo!"
    HelloWorldStruct.mspanish = "Hola Mundo!"

    ServerAddTranslationsForToken( "#HelloWorld", HelloWorldStruct, NSGetCurrentModName() )
    #endif
}

void function ServerInitModTranslations()
{
    foreach ( string modName in NSGetModNames() )
    {
        if ( NSIsModEnabled( modName ) )
        {
            // Try to load translations
            if ( NSDoesFileExist( modName + ".json" ) )
            {
                #if DEV
                printt( "[MultiLanguageStrings] Loading translation table for mod:" + modName )
                #endif
                NSLoadJSONFile( modName + ".json", LoadModTranslationTable )
            }
        }
    }
}

void function LoadModTranslationTable( table TranslationTable )
{    
    #if DEV
    printt( "++++++++++++++++++++++++++++++++++++++++TRANSLATION TABLE LOADING START++++++++++++++++++++++++++++++++++++++++" )
    #endif
    string modName = expect string( TranslationTable["Mod"] )
    printt("[MultiLanguageStrings] TRANSLATION TABLE - Mod Name:" + modName )
    if ( modName == "" )
    {
        printt( "[MultiLanguageStrings] WARNING: Can't find Mod Name in translation table!" )
        return
    }
    else
    {
        if (!(modName in NSServerDictionary))
        {
            NSServerDictionary[ modName ] <- {}
        }

        foreach ( string key, value in TranslationTable )
        {
            #if DEV
            printt("[MultiLanguageStrings] Key:" + key + " Value:" + value)
            #endif
            if ( key != "Mod" )
            {
                table LocalizedTable = expect table( TranslationTable[key] )
                #if DEV
                printt("[MultiLanguageStrings] TRANSLATION TABLE - Token:" + key )
                #endif
                LocalizedStringStruct LoadedLocalizedTable
                foreach ( string language, string phrase in LocalizedTable )
                {
                    // Maybe I shouldn't do this horror...
                    switch ( language )
                    {
                        case "english":
                            LoadedLocalizedTable.english = phrase
                            break
                        case "french":
                            LoadedLocalizedTable.french = phrase
                            break
                        case "german":
                            LoadedLocalizedTable.german = phrase
                            break                        
                        case "spanish":
                            LoadedLocalizedTable.spanish = phrase
                            break                        
                        case "italian":
                            LoadedLocalizedTable.italian = phrase
                            break                        
                        case "japanese":
                            LoadedLocalizedTable.japanese = phrase
                            break
                        case "polish":
                            LoadedLocalizedTable.polish = phrase
                            break                        
                        case "russian":
                            LoadedLocalizedTable.russian = phrase
                            break                        
                        case "tchinese":
                            LoadedLocalizedTable.tchinese = phrase
                            break                        
                        case "portuguese":
                            LoadedLocalizedTable.portuguese = phrase
                            break
                        case "mspanish":
                            LoadedLocalizedTable.mspanish = phrase
                            break
                    }
                }
                ServerAddTranslationsForToken( key, LoadedLocalizedTable, modName )
            }
        }
    }
    printt( "[MultiLanguageStrings] Mod Translation table loaded!" )
    #if DEV
    printt( "++++++++++++++++++++++++++++++++++++++++TRANSLATION TABLE LOADING END++++++++++++++++++++++++++++++++++++++++" )
    #endif
}

void function ServerTranslantionsOnClientConnected( entity player )
{
    if ( IsValid( player ) )
    {
        player.s.language <- "english"
        string cl_lang = expect string( player.GetUserInfoString( "cl_mls_serverlang" ) )

        if ( IsValidLanguage( cl_lang ) )
        {
            #if DEV
            printt( "[MultiLanguageStrings] Client " + player + ". Valid language ConVar found!" )
            #endif
            player.s.language = cl_lang
        }

        #if DEV
        printt( "[MultiLanguageStrings] Client " + player + " language: " + player.s.language )
        #endif
    }
}

bool function ClientCommandCallbackForceLanguage( entity player, array<string> args )
{
    printt( "[MultiLanguageStrings] Client " + player + " forcing server language!" )

    if ( args.len() > 1 )
        return true

    string cl_lang
    
    // Reset to "cl_language" ConVar if no args.
    if ( args.len() == 0 || args[0] == "" )
        cl_lang = expect string( player.GetUserInfoString( "cl_mls_serverlang" ) )
    else
        cl_lang = args[0]

    printt( "[MultiLanguageStrings] Client " + player + ". Forced language: " + cl_lang )

    if ( IsValidLanguage( cl_lang ) )
    {
        if (!( "language" in player.s ))
        {
            player.s.language <- cl_lang
        }
        else
        {
            player.s.language = cl_lang
        }
        return true
    }
    return true
}

void function ServerAddTranslationsForToken( string szToken, LocalizedStringStruct localizedStruct, string modName, bool bForceSaveTranslation = false )
{
    // Prepare localized stringtable
    table<string, string> LocalizedTable = 
    {
        english = localizedStruct.english,
        french = localizedStruct.french,
        german = localizedStruct.german,
        spanish = localizedStruct.spanish,
        italian = localizedStruct.italian,
        japanese = localizedStruct.japanese,
        polish = localizedStruct.polish,
        russian = localizedStruct.russian,
        tchinese = localizedStruct.tchinese,
        portuguese = localizedStruct.portuguese,
        mspanish = localizedStruct.mspanish
    }
    // Get mod table and override it.
    if (!(modName in NSServerDictionary))
    {
        NSServerDictionary[ modName ] <- {}
    }
    NSServerDictionary[ modName ][ szToken ] <- LocalizedTable

    printt( "[MultiLanguageStrings] Added translations for mod:" + modName + ". Token:" + szToken )

    if ( !NSDoesFileExist( modName + ".json" ) || bForceSaveTranslation )
    {
        SaveFileStruct saveTable
        saveTable.Mod = modName
        saveTable.Phrases = NSServerDictionary[ modName ]
        ServerSaveTranslationForMod( saveTable )
    }
}

void function ServerSaveTranslationForMod( SaveFileStruct saveTable )
{
    table JSONTable
    JSONTable.Mod <- saveTable.Mod
    foreach ( string szToken, table<string, string> LocalizedTable in saveTable.Phrases )
    {
        JSONTable[ szToken ] <- {}
        foreach ( string langkey, string phrase in LocalizedTable )
        {
            JSONTable[ szToken ][ langkey ] <- phrase
        }
    }
    NSSaveJSONFile( JSONTable.Mod + ".json", JSONTable )
    printt( "[MultiLanguageStrings] Translations file for mod " + JSONTable.Mod + " saved!" )
}

bool function IsValidLanguage( lang_name )
{
    expect string ( lang_name )

    if ( lang_name != "" )
    {
        if ( ValidLanguages.find( lang_name ) != -1 )
            return true
    }

    printt( "[MultiLanguageStrings] WARNING: Language is not valid: " + lang_name )
    return false
}

string function ServerLocalizeTokenForClient( entity player, string szToken, string modName )
{
    #if DEV
    printt( "[MultiLanguageStrings] Calling string translation for mod:" + modName + ". Token:" + szToken )
    #endif

    if ( "language" in player.s )
    {
        var cl_lang = player.s.language
        expect string ( cl_lang )

        if ( modName in NSServerDictionary )
        {
            if ( szToken in NSServerDictionary[ modName ] )
            {
                table<string, string> szTokenStruct = NSServerDictionary[ modName ][ szToken ]

                if ( cl_lang in szTokenStruct )
                {
                    if ( szTokenStruct[ cl_lang ] != "" )
                    {
                        return szTokenStruct[ cl_lang ]
                    }
                }
                // Fallback to english
                if ( "english" in szTokenStruct )
                {
                    if ( szTokenStruct[ "english" ] != "" )
                    {
                        printt( "[MultiLanguageStrings] WARNING: Can't find translation for token " + szToken + " in language " + cl_lang + ", fallback to english!" )
                        return szTokenStruct[ "english" ]
                    }
                }
            }
            else
            {
                printt( "[MultiLanguageStrings] WARNING: Can't find translation for token " + szToken + " in stringtable of mod " + modName + "!" )
            }
        }
        else
        {
            printt( "[MultiLanguageStrings] WARNING: Can't find stringtable of mod " + modName + "!" )
        }
    }
    return szToken
}